<?xml version="1.0" encoding="UTF-8" ?>
<configuration scan="true" scanPeriod="60 second" debug="false">

    <contextName>EAMS-fxb</contextName>
    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" />
    <!-- 输出日志到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss} %5level------%logger{0}   %msg]%n </Pattern>
            <charset>UTF-8</charset>
        </encoder>
        <target>
            System.err
        </target>
    </appender>

    <appender name="FileAppender" class="ch.qos.logback.core.FileAppender">
        <file>log.log</file>
        <append>true</append>
        <!-- LevelFilter : 级别过滤器，根据日志级别进行过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss} %5level %thread %logger{0} %msg]%n</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定的文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="RollingFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>info.log</File>
        <!-- ThresholdFilter : 临界值过滤器，过滤掉TRACE 和 DEBUG 的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss} %5level %thread %logger{0} %msg]%n</Pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。
        -    窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。
        -    可以指定文件压缩选项
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>info.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>3</maxIndex>
            <maxHistory>30</maxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

    <!-- 异步输出  -->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>512</queueSize>
        <appender-ref ref="RollingFileAppender"></appender-ref>
    </appender>

    <!--
    - 1.name：包名或类名，用来指定受此logger约束的某一个包或者具体的某一个类
    - 2.未设置打印级别，所以继承他的上级<root>的日志级别“DEBUG”
    - 3.未设置additivity，默认为true，将此logger的打印信息向上级传递；
    - 4.未设置appender，此logger本身不打印任何信息，级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，
    -  root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；
    -->
    <logger name="com.fxb.eams" />

    <!--
        - 1.将级别为“INFO”及大于“INFO”的日志信息交给此logger指定的名为“STDOUT”的appender处理，
        - 在控制台中打出日志，不再向次logger的上级 <logger name="logback"/> 传递打印信息
        - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。
        -        如果未设置此属性，那么当前logger将会继承上级的级别。
        - 3.additivity：为false，表示此logger的打印信息不再向上级传递,如果设置为true，会打印两次
        - 4.appender-ref：指定了名字为"STDOUT"的appender。
        -->
    <logger name="com.fxb.eams.common" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ASYNC" />
    </logger>

<!--
    - 根logger
    - level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
    -       默认是DEBUG。
    -appender-ref:可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
-->
    <root level="info">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ASYNC" />
    </root>

</configuration>